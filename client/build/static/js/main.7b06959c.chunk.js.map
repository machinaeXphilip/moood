{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","React","useState","classification","setClassification","url","setUrl","className","probability","style","fontWeight","fontSize","type","onClick","evt","name","showUploadList","action","onChange","info","file","status","response","message","error","title","icon","UploadOutlined","textAlign","target","value","placeholder","axios","then","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,uMC2E5BC,MAnEf,WAAgB,IAAD,EAC+BC,IAAMC,WADrC,mBACNC,EADM,KACUC,EADV,OAESH,IAAMC,WAFf,mBAENG,EAFM,KAEDC,EAFC,KAUb,OACE,yBAAKC,UAAU,OACZJ,EACC,6BACE,oCACuC,IAAhCA,EAAe,GAAGK,YADzB,wBAGA,yBAAKC,MAAO,CAAEC,WAAY,OAAQC,SAAU,QACzCR,EAAe,GAAGI,WAEpBJ,EAAe,GACd,8BACE,2DACA,6BAAMA,EAAe,GAAGI,YAExB,KAEJ,kBAAC,IAAD,CACEK,KAAM,UACNC,QAAS,SAACC,GACRV,IACAE,MAJJ,eAWF,6BACE,kBAAC,IAAD,CACES,KAAM,SACNC,gBAAgB,EAChBC,OAAM,SACNC,SAAU,SAACC,GACe,QAApBA,EAAKC,KAAKC,OACZjB,EAAkBe,EAAKC,KAAKE,SAASnB,gBACP,UAArBgB,EAAKC,KAAKC,QACnBE,IAAQC,MAAML,EAAKC,KAAKE,YAI5B,kBAAC,IAAD,CAASG,MAAO,mBACd,kBAAC,IAAD,CAAQC,KAAM,kBAACC,EAAA,EAAD,UAGlB,yBAAKlB,MAAO,CAAEmB,UAAW,WAAzB,MACA,kBAAC,IAAD,CACEV,SAAU,SAACJ,GAAD,OAASR,EAAOQ,EAAIe,OAAOC,QACrCC,YAAa,uBAEf,kBAAC,IAAD,CAAQlB,QAAS,WAvDvBmB,OAAA,kBAA8B,CAAE3B,IAAKA,IAAO4B,MAAK,SAACX,GAChDlB,EAAkBkB,EAASY,KAAK/B,qBAsD5B,SCxDUgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAA1B,GACL2B,QAAQ3B,MAAMA,EAAMD,c","file":"static/js/main.7b06959c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport { Upload, message, Tooltip, Button, Input } from \"antd\";\nimport * as axios from \"axios\";\nimport { UploadOutlined } from \"@ant-design/icons\";\n\nfunction App() {\n  const [classification, setClassification] = React.useState();\n  const [url, setUrl] = React.useState();\n\n  const handleUrlRequest = (evt) => {\n    axios.post(`/image-from-url`, { url: url }).then((response) => {\n      setClassification(response.data.classification);\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      {classification ? (\n        <div>\n          <div>\n            I'm {classification[0].probability * 100}% sure that this is:\n          </div>\n          <div style={{ fontWeight: \"bold\", fontSize: \"2em\" }}>\n            {classification[0].className}\n          </div>\n          {classification[1] ? (\n            <span>\n              <div>Although it may also be...</div>\n              <div>{classification[1].className}</div>\n            </span>\n          ) : null}\n\n          <Button\n            type={\"primary\"}\n            onClick={(evt) => {\n              setClassification();\n              setUrl();\n            }}\n          >\n            Start over\n          </Button>\n        </div>\n      ) : (\n        <div>\n          <Upload\n            name={\"upload\"}\n            showUploadList={false}\n            action={`/image`}\n            onChange={(info) => {\n              if (info.file.status == \"done\") {\n                setClassification(info.file.response.classification);\n              } else if (info.file.status === \"error\") {\n                message.error(info.file.response);\n              }\n            }}\n          >\n            <Tooltip title={\"Upload an image\"}>\n              <Button icon={<UploadOutlined />} />\n            </Tooltip>\n          </Upload>\n          <div style={{ textAlign: \"center\" }}>or</div>\n          <Input\n            onChange={(evt) => setUrl(evt.target.value)}\n            placeholder={\"Or paste a link...\"}\n          />\n          <Button onClick={() => handleUrlRequest()}>Go</Button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}